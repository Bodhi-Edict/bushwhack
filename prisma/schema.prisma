// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role          @default(USER)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
  test          Test[]
  testAttempts  TestAttempt[]
  explanations  Explanation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

model Test {
  name          String
  instructions  String
  AIPrompt      String?
  maxTimeInMins Int
  createdBy     User          @relation(fields: [userId], references: [id])
  questions     Question[]
  subject       Subject       @relation(fields: [subjectId], references: [id])
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
  userId        String
  subjectId     String
  testAttempts  TestAttempt[]
  explanations  Explanation[]
}

model Question {
  test         Test?     @relation(fields: [testId], references: [id])
  correctValue String
  title        String
  AIPrompt     String?
  testId       String?
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  answers      Answer[]
}

model Subject {
  name        String
  iconUrl     String
  description String
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  tests       Test[]
}

model TestAttempt {
  explanations Explanation[]
  test         Test          @relation(fields: [testId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
  progress     Decimal
  startTime    DateTime
  endTime      DateTime
  id           String        @id @default(cuid())
  testId       String
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
}

model Explanation {
  user          User        @relation(fields: [userId], references: [id])
  testAttempt   TestAttempt @relation(fields: [testAttemptId], references: [id])
  test          Test        @relation(fields: [testId], references: [id])
  testId        String
  testAttemptId String
  id            String      @id @default(cuid())
  userId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?
  answers       Answer[]
}

model Answer {
  explanation     Explanation @relation(fields: [explanationId], references: [id])
  question        Question    @relation(fields: [questionId], references: [id])
  isCorrect       Boolean
  computedAnswer  String
  computedWorking String
  explanationId   String
  questionId      String
  value           String
  id              String      @id @default(cuid())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  deletedAt       DateTime?
}
